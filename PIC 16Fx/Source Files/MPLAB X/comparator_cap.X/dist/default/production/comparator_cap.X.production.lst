

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Aug 23 15:36:34 2019

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    10                           	dabs	1,0x7E,2
    11  0000                     
    12                           ; Version 1.41
    13                           ; Generated 25/01/2017 GMT
    14                           ; 
    15                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F690 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0006                     	;# 
    53  0007                     	;# 
    54  000A                     	;# 
    55  000B                     	;# 
    56  000C                     	;# 
    57  000D                     	;# 
    58  000E                     	;# 
    59  000E                     	;# 
    60  000F                     	;# 
    61  0010                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0013                     	;# 
    65  0014                     	;# 
    66  0015                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0017                     	;# 
    70  0018                     	;# 
    71  0019                     	;# 
    72  001A                     	;# 
    73  001C                     	;# 
    74  001D                     	;# 
    75  001E                     	;# 
    76  001F                     	;# 
    77  0081                     	;# 
    78  0085                     	;# 
    79  0086                     	;# 
    80  0087                     	;# 
    81  008C                     	;# 
    82  008D                     	;# 
    83  008E                     	;# 
    84  008F                     	;# 
    85  0090                     	;# 
    86  0092                     	;# 
    87  0093                     	;# 
    88  0093                     	;# 
    89  0093                     	;# 
    90  0094                     	;# 
    91  0095                     	;# 
    92  0095                     	;# 
    93  0096                     	;# 
    94  0096                     	;# 
    95  0097                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009A                     	;# 
    99  009B                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  010E                     	;# 
   106  010F                     	;# 
   107  0115                     	;# 
   108  0116                     	;# 
   109  0118                     	;# 
   110  0119                     	;# 
   111  011A                     	;# 
   112  011B                     	;# 
   113  011E                     	;# 
   114  011F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  019D                     	;# 
   118  019E                     	;# 
   119  0006                     _PORTBbits	set	6
   120  001E                     _ADRESH	set	30
   121  001F                     _ADCON0bits	set	31
   122  009E                     _ADRESL	set	158
   123  009F                     _ADCON1bits	set	159
   124  0086                     _TRISBbits	set	134
   125  0085                     _TRISAbits	set	133
   126  0087                     _TRISC	set	135
   127  0086                     _TRISB	set	134
   128  0085                     _TRISA	set	133
   129  011E                     _ANSELbits	set	286
   130                           
   131                           	psect	strings
   132  0002                     __pstrings:	
   133  0002                     stringtab:	
   134  0002                     __stringtab:	
   135  0002                     stringcode:	
   136                           ;	String table - string pointers are 1 byte each
   137                           
   138  0002                     stringdir:	
   139  0002  3000               	movlw	high stringdir
   140  0003  008A               	movwf	10
   141  0004  0804               	movf	4,w
   142  0005  0A84               	incf	4,f
   143  0006  0782               	addwf	2,f
   144  0007                     __stringbase:	
   145  0007  3400               	retlw	0
   146  0008                     __end_of__stringtab:	
   147  0008                     STR_1:	
   148  0008  3463               	retlw	99	;'c'
   149  0009  346A               	retlw	106	;'j'
   150  000A  3473               	retlw	115	;'s'
   151  000B  3463               	retlw	99	;'c'
   152  000C  3462               	retlw	98	;'b'
   153  000D  3473               	retlw	115	;'s'
   154  000E  346A               	retlw	106	;'j'
   155  000F  3463               	retlw	99	;'c'
   156  0010  3400               	retlw	0
   157                           
   158                           ; #config settings
   159  0000                     
   160                           	psect	cinit
   161  07FD                     start_initialization:	
   162  07FD                     __initialization:	
   163  07FD                     end_of_initialization:	
   164                           ;End of C runtime variable initialization code
   165                           
   166  07FD                     __end_of__initialization:	
   167  07FD  0183               	clrf	3
   168  07FE  118A  2FB2         	ljmp	_main	;jump to C main() function
   169                           
   170                           	psect	cstackCOMMON
   171  0070                     __pcstackCOMMON:	
   172  0070                     ??_printf:	
   173  0070                     ?_putch:	
   174                           ; 1 bytes @ 0x0
   175                           
   176  0070                     ??_putch:	
   177                           ; 1 bytes @ 0x0
   178                           
   179  0070                     ?_printf:	
   180                           ; 1 bytes @ 0x0
   181                           
   182  0070                     ?_main:	
   183                           ; 2 bytes @ 0x0
   184                           
   185  0070                     putch@c:	
   186                           ; 2 bytes @ 0x0
   187                           
   188                           
   189                           ; 1 bytes @ 0x0
   190  0070                     	ds	1
   191  0071                     printf@ap:	
   192                           
   193                           ; 1 bytes @ 0x1
   194  0071                     	ds	1
   195  0072                     printf@c:	
   196                           
   197                           ; 1 bytes @ 0x2
   198  0072                     	ds	1
   199  0073                     printf@f:	
   200                           
   201                           ; 1 bytes @ 0x3
   202  0073                     	ds	1
   203  0074                     ??_main:	
   204                           
   205                           ; 1 bytes @ 0x4
   206  0074                     	ds	3
   207  0077                     main@result:	
   208                           
   209                           ; 2 bytes @ 0x7
   210  0077                     	ds	2
   211                           
   212                           	psect	maintext
   213  07B2                     __pmaintext:	
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 10 in file "comp_main.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;  result          2    7[COMMON] int 
   224 ;; Return value:  Size  Location     Type
   225 ;;                  2   28[None  ] int 
   226 ;; Registers used:
   227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : B00/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   233 ;;      Params:         0       0       0       0
   234 ;;      Locals:         2       0       0       0
   235 ;;      Temps:          3       0       0       0
   236 ;;      Totals:         5       0       0       0
   237 ;;Total ram usage:        5 bytes
   238 ;; Hardware stack levels required when called:    2
   239 ;; This function calls:
   240 ;;		_printf
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246                           
   247                           ;psect for function _main
   248  07B2                     _main:	
   249                           
   250                           ;comp_main.c: 12: int result;
   251                           ;comp_main.c: 14: TRISA = 0xFF;
   252                           
   253                           ;incstack = 0
   254                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   255  07B2  30FF               	movlw	255
   256  07B3  1683               	bsf	3,5	;RP0=1, select bank1
   257  07B4  1303               	bcf	3,6	;RP1=0, select bank1
   258  07B5  0085               	movwf	5	;volatile
   259                           
   260                           ;comp_main.c: 15: TRISB = 0xFF;
   261  07B6  30FF               	movlw	255
   262  07B7  0086               	movwf	6	;volatile
   263                           
   264                           ;comp_main.c: 16: TRISC = 0xFF;
   265  07B8  30FF               	movlw	255
   266  07B9  0087               	movwf	7	;volatile
   267                           
   268                           ;comp_main.c: 20: TRISAbits.TRISA2 = 1;
   269  07BA  1505               	bsf	5,2	;volatile
   270                           
   271                           ;comp_main.c: 21: ANSELbits.ANS2 = 1;
   272  07BB  1283               	bcf	3,5	;RP0=0, select bank2
   273  07BC  1703               	bsf	3,6	;RP1=1, select bank2
   274  07BD  151E               	bsf	30,2	;volatile
   275                           
   276                           ;comp_main.c: 22: TRISBbits.TRISB4 = 0;
   277  07BE  1683               	bsf	3,5	;RP0=1, select bank1
   278  07BF  1303               	bcf	3,6	;RP1=0, select bank1
   279  07C0  1206               	bcf	6,4	;volatile
   280                           
   281                           ;comp_main.c: 28: ADCON0bits.ADFM = 1;
   282  07C1  1283               	bcf	3,5	;RP0=0, select bank0
   283  07C2  1303               	bcf	3,6	;RP1=0, select bank0
   284  07C3  179F               	bsf	31,7	;volatile
   285                           
   286                           ;comp_main.c: 29: ADCON0bits.VCFG = 0;
   287  07C4  131F               	bcf	31,6	;volatile
   288                           
   289                           ;comp_main.c: 30: ADCON1bits.ADCS = 0b001;
   290  07C5  1683               	bsf	3,5	;RP0=1, select bank1
   291  07C6  1303               	bcf	3,6	;RP1=0, select bank1
   292  07C7  081F               	movf	31,w	;volatile
   293  07C8  398F               	andlw	-113
   294  07C9  3810               	iorlw	16
   295  07CA  009F               	movwf	31	;volatile
   296                           
   297                           ;comp_main.c: 35: ADCON0bits.CHS = 2;
   298  07CB  1283               	bcf	3,5	;RP0=0, select bank0
   299  07CC  1303               	bcf	3,6	;RP1=0, select bank0
   300  07CD  081F               	movf	31,w	;volatile
   301  07CE  39C3               	andlw	-61
   302  07CF  3808               	iorlw	8
   303  07D0  009F               	movwf	31	;volatile
   304                           
   305                           ;comp_main.c: 36: ADCON0bits.ADON = 1;
   306  07D1  141F               	bsf	31,0	;volatile
   307  07D2                     l29:	
   308                           ;comp_main.c: 42: while(1)
   309                           
   310                           
   311                           ;comp_main.c: 43: {
   312                           ;comp_main.c: 44: _delay((unsigned long)((200)*(4000000/4000.0)));
   313  07D2  3002               	movlw	2
   314  07D3  00F6               	movwf	??_main+2
   315  07D4  3004               	movlw	4
   316  07D5  00F5               	movwf	??_main+1
   317  07D6  30BA               	movlw	186
   318  07D7  00F4               	movwf	??_main
   319  07D8                     u77:	
   320  07D8  0BF4               	decfsz	??_main,f
   321  07D9  2FD8               	goto	u77
   322  07DA  0BF5               	decfsz	??_main+1,f
   323  07DB  2FD8               	goto	u77
   324  07DC  0BF6               	decfsz	??_main+2,f
   325  07DD  2FD8               	goto	u77
   326  07DE  0000               	nop
   327                           
   328                           ;comp_main.c: 46: ADCON0bits.GO = 1;
   329  07DF  1283               	bcf	3,5	;RP0=0, select bank0
   330  07E0  1303               	bcf	3,6	;RP1=0, select bank0
   331  07E1  149F               	bsf	31,1	;volatile
   332  07E2                     l30:	
   333                           ;comp_main.c: 47: while(ADCON0bits.GO==1){};
   334                           
   335  07E2  189F               	btfsc	31,1	;volatile
   336  07E3  2FE2               	goto	l30
   337                           
   338                           ;comp_main.c: 49: result = (ADRESH<<8)+ADRESL;
   339  07E4  081E               	movf	30,w	;volatile
   340  07E5  00F8               	movwf	main@result+1
   341  07E6  1683               	bsf	3,5	;RP0=1, select bank1
   342  07E7  1303               	bcf	3,6	;RP1=0, select bank1
   343  07E8  081E               	movf	30,w	;volatile
   344  07E9  00F7               	movwf	main@result
   345                           
   346                           ;comp_main.c: 51: if(result > 512)
   347  07EA  0878               	movf	main@result+1,w
   348  07EB  3A80               	xorlw	128
   349  07EC  00FF               	movwf	127
   350  07ED  3082               	movlw	130
   351  07EE  027F               	subwf	127,w
   352  07EF  1D03               	skipz
   353  07F0  2FF3               	goto	u65
   354  07F1  3001               	movlw	1
   355  07F2  0277               	subwf	main@result,w
   356  07F3                     u65:	
   357  07F3  1C03               	skipc
   358  07F4  2FF9               	goto	l33
   359                           
   360                           ;comp_main.c: 52: PORTBbits.RB4 = 1;
   361  07F5  1283               	bcf	3,5	;RP0=0, select bank0
   362  07F6  1303               	bcf	3,6	;RP1=0, select bank0
   363  07F7  1606               	bsf	6,4	;volatile
   364  07F8  2FD2               	goto	l29
   365  07F9                     l33:	
   366                           
   367                           ;comp_main.c: 53: else
   368                           ;comp_main.c: 54: PORTBbits.RB4 = 0;
   369  07F9  1283               	bcf	3,5	;RP0=0, select bank0
   370  07FA  1303               	bcf	3,6	;RP1=0, select bank0
   371  07FB  1206               	bcf	6,4	;volatile
   372  07FC  2FD2               	goto	l29
   373  07FD                     __end_of_main:	
   374                           ;comp_main.c: 59: return 0;
   375                           ;	Return value of _main is never used
   376                           
   377                           ;comp_main.c: 57: }
   378                           ;comp_main.c: 58: printf("cjscbsjc");
   379                           
   380                           
   381                           	psect	text1
   382  079A                     __ptext1:	
   383 ;; *************** function _printf *****************
   384 ;; Defined at:
   385 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;  f               1    wreg     PTR const unsigned char 
   388 ;;		 -> STR_1(9), 
   389 ;; Auto vars:     Size  Location     Type
   390 ;;  f               1    3[COMMON] PTR const unsigned char 
   391 ;;		 -> STR_1(9), 
   392 ;;  tmpval          4    0        struct .
   393 ;;  cp              2    0        PTR const unsigned char 
   394 ;;  len             2    0        unsigned int 
   395 ;;  val             2    0        unsigned int 
   396 ;;  c               1    2[COMMON] char 
   397 ;;  ap              1    1[COMMON] PTR void [1]
   398 ;;		 -> ?_printf(2), 
   399 ;;  flag            1    0        unsigned char 
   400 ;;  prec            1    0        char 
   401 ;; Return value:  Size  Location     Type
   402 ;;                  2   26[None  ] int 
   403 ;; Registers used:
   404 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   410 ;;      Params:         0       0       0       0
   411 ;;      Locals:         3       0       0       0
   412 ;;      Temps:          1       0       0       0
   413 ;;      Totals:         4       0       0       0
   414 ;;Total ram usage:        4 bytes
   415 ;; Hardware stack levels used:    1
   416 ;; Hardware stack levels required when called:    1
   417 ;; This function calls:
   418 ;;		_putch
   419 ;; This function is called by:
   420 ;;		_main
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           
   425                           ;psect for function _printf
   426  079A                     _printf:	
   427                           
   428                           ;incstack = 0
   429                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   430                           ;printf@f stored from wreg
   431  079A  00F3               	movwf	printf@f
   432                           
   433                           ;doprnt.c: 466: va_list ap;
   434                           ;doprnt.c: 499: signed char c;
   435                           ;doprnt.c: 506: signed char prec;
   436                           ;doprnt.c: 508: unsigned char flag;
   437                           ;doprnt.c: 523: union {
   438                           ;doprnt.c: 524: unsigned long vd;
   439                           ;doprnt.c: 525: double integ;
   440                           ;doprnt.c: 526: } tmpval;
   441                           ;doprnt.c: 528: unsigned int val;
   442                           ;doprnt.c: 529: unsigned len;
   443                           ;doprnt.c: 530: const char * cp;
   444                           ;doprnt.c: 533: *ap = __va_start();
   445  079B  3070               	movlw	(low (?_printf| 0))& (0+255)
   446  079C  00F0               	movwf	??_printf
   447  079D  0870               	movf	??_printf,w
   448  079E  00F1               	movwf	printf@ap
   449  079F                     l550:	
   450                           ;doprnt.c: 543: }
   451                           ;doprnt.c: 1422: {
   452                           
   453                           ;doprnt.c: 542: continue;
   454                           
   455                           ;doprnt.c: 536: while(c = *f++) {
   456                           
   457  079F  3001               	movlw	1
   458  07A0  07F3               	addwf	printf@f,f
   459  07A1  30FF               	movlw	-1
   460  07A2  0773               	addwf	printf@f,w
   461  07A3  0084               	movwf	4
   462  07A4  118A  2002  118A   	fcall	stringdir
   463  07A7  00F0               	movwf	??_printf
   464  07A8  0870               	movf	??_printf,w
   465  07A9  00F2               	movwf	printf@c
   466  07AA  0872               	movf	printf@c,w
   467  07AB  1903               	btfsc	3,2
   468  07AC  0008               	return
   469                           
   470                           ;doprnt.c: 540: {
   471                           ;doprnt.c: 541: (putch(c) );
   472  07AD  0872               	movf	printf@c,w
   473  07AE  118A  2799  118A   	fcall	_putch
   474  07B1  2F9F               	goto	l550
   475  07B2                     __end_of_printf:	
   476                           ;doprnt.c: 1469: }
   477                           ;doprnt.c: 1533: }
   478                           ;doprnt.c: 1540: return 0;
   479                           ;	Return value of _printf is never used
   480                           
   481                           
   482                           	psect	text2
   483  0799                     __ptext2:	
   484 ;; *************** function _putch *****************
   485 ;; Defined at:
   486 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\putch.c"
   487 ;; Parameters:    Size  Location     Type
   488 ;;  c               1    wreg     unsigned char 
   489 ;; Auto vars:     Size  Location     Type
   490 ;;  c               1    0[COMMON] unsigned char 
   491 ;; Return value:  Size  Location     Type
   492 ;;                  1    wreg      void 
   493 ;; Registers used:
   494 ;;		wreg
   495 ;; Tracked objects:
   496 ;;		On entry : 0/0
   497 ;;		On exit  : 0/0
   498 ;;		Unchanged: 0/0
   499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   500 ;;      Params:         0       0       0       0
   501 ;;      Locals:         0       0       0       0
   502 ;;      Temps:          0       0       0       0
   503 ;;      Totals:         0       0       0       0
   504 ;;Total ram usage:        0 bytes
   505 ;; Hardware stack levels used:    1
   506 ;; This function calls:
   507 ;;		Nothing
   508 ;; This function is called by:
   509 ;;		_printf
   510 ;; This function uses a non-reentrant model
   511 ;;
   512                           
   513                           
   514                           ;psect for function _putch
   515  0799                     _putch:	
   516                           
   517                           ;incstack = 0
   518                           ; Regs used in _putch: [wreg]
   519  0799  0008               	return
   520  079A                     __end_of_putch:	
   521  007E                     btemp	set	126	;btemp
   522  007E                     wtemp0	set	126


Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80      0       0
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_printf

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0      96
                                              4 COMMON     5     5      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              16    16      0      73
                                              0 COMMON     4     4      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _printf
     _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      0       0       3        0.0%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0       0       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Aug 23 15:36:34 2019

                      pc 0002              __CFG_CP$OFF 0000                       l30 07E2  
                     l33 07F9                       l29 07D2                       u65 07F3  
                     u77 07D8                       fsr 0004                      l550 079F  
           __CFG_CPD$OFF 0000                      fsr0 0004                     STR_1 0008  
           __CFG_WDTE$ON 0000                     _main 07B2                     btemp 007E  
                   start 0000            __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000  
                  ?_main 0070                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087           __CFG_FCMEN$OFF 0000                    _putch 0799  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FD             __end_of_main 07FD  
                 ??_main 0074                   _ADRESH 001E                   _ADRESL 009E  
                 ?_putch 0070           __CFG_PWRTE$OFF 0000                   _printf 079A  
                 putch@c 0070  __end_of__initialization 07FD           __pcstackCOMMON 0070  
          __end_of_putch 079A                  ??_putch 0070               __pmaintext 07B2  
                ?_printf 0070               __stringtab 0002                _ANSELbits 011E  
                __ptext1 079A                  __ptext2 0799          __size_of_printf 0018  
   end_of_initialization 07FD                  printf@c 0072                  printf@f 0073  
              _PORTBbits 0006                _TRISAbits 0085                _TRISBbits 0086  
             main@result 0077           __end_of_printf 07B2      start_initialization 07FD  
               ??_printf 0070                ___latbits 0001                __pstrings 0002  
         __size_of_putch 0001               _ADCON0bits 001F              __stringbase 0007  
             _ADCON1bits 009F       __end_of__stringtab 0008            __size_of_main 004B  
              stringcode 0002                 printf@ap 0071                 stringdir 0002  
               stringtab 0002        __CFG_FOSC$INTRCIO 0000  
